<?xml version="1.0" encoding="utf-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <flavor>dynalist</flavor>
    <source>https://dynalist.io</source>
    <ownerName>Rafael</ownerName>
    <ownerEmail>rafarc21@gmail.com</ownerEmail>
  </head>
  <body>
    <outline text="How to use Git and GitHub ">
      <outline text="Course" collapsed="true">
        <outline text="Objective">
          <outline text="**Lesson 1:** ">
            <outline text="Cover the concept of version control and why use it"/>
          </outline>
          <outline text="**Lesson 2:** ">
            <outline text="Create a git **__repository__**"/>
            <outline text="Initialize and add **__commits__** to the repository"/>
            <outline text="Use the **__staging area__** to control what changes go into each commits "/>
            <outline text="Make parallel versions of the code with **__git branches__**"/>
            <outline text="**__Merge__** two branches together"/>
          </outline>
          <outline text="**Lesson 3:** ">
            <outline text="Share a project and collaborate with other people">
              <outline text=""/>
            </outline>
          </outline>
          <outline text=""/>
          <outline text=""/>
          <outline text=""/>
          <outline text="Lesson 3: "/>
        </outline>
        <outline text="Strategy"/>
        <outline text="Ambiente ">
          <outline text="COURSE PLAYLIST ">
            <outline text="https://www.youtube.com/playlist?list=PLAwxTw4SYaPk8_-6IGxJtD3i2QAu5_s_p"/>
          </outline>
        </outline>
        <outline text="Conhecimento">
          <outline text="Nenhum"/>
        </outline>
        <outline text="Papéis"/>
        <outline text=""/>
      </outline>
      <outline text="Git Version Control System (Subjetct of the course)">
        <outline text="Objective">
          <outline text="Facilitar a colaboração em projetos de programação"/>
        </outline>
        <outline text="Strategy">
          <outline text="Saving different versions of your code and allow you to navigate through versions easily."/>
        </outline>
        <outline text="Ambiente">
          <outline text="Git" collapsed="true">
            <outline text="Version control system" collapsed="true">
              <outline text="Sistema que permitem gerenciar de forma sistemática diversas versões de documentos (códgio, receitas, etc)."/>
              <outline text="Cada versão registrada no sistema, é chamada de commit. "/>
            </outline>
            <outline text="Created by Linus Torvalds" collapsed="true">
              <outline text="Git is a britsh slang for an unpleasent person and was chosen for funny reasons."/>
            </outline>
            <outline text="Features">
              <outline text="Funciona com qualquer editor"/>
              <outline text="Funciona offline"/>
              <outline text="Exige que o usuário escolha quando salvar uma nova versão, criando commits.">
                <outline text="Commits versões do código que são criadas manualmente pelo usuário, permitindo que ele escolha quando criar, de acordo com o que fizer sentido para o usuário. ">
                  <outline text="exemplo de quando um commit deve ser criado:">
                    <outline text="quando uma nova funcionalidade for implementada"/>
                    <outline text="quando um bug for corrigido"/>
                    <outline text="quando uma série de alterações foi finalizada e o código está pronto para ser compilado"/>
                    <outline text="uma mudança no códidgo do começo ao fim" complete="true"/>
                    <outline text="etc"/>
                  </outline>
                  <outline text="Todo commit tem um pai. Utilize `git show` para ver a diferenças entre um pai e um filho"/>
                </outline>
                <outline text="Toda vez que um commit é criado, o git exige que o usuário forneça uma mensagem explicando o que tem de alteração naquela versão. ">
                  <outline text="Isso facilita navegar pelas versões. "/>
                  <outline text=""/>
                </outline>
              </outline>
              <outline text="Repository">
                <outline text="Grupo de arquivos"/>
              </outline>
            </outline>
          </outline>
          <outline text="Github" collapsed="true">
            <outline text="Plataforma de colaboração e compartilhamento de código">
              <outline text="Estimula a prática do open source ao tornar repositórios abertos, gratuitos"/>
              <outline text="Permite qualquer um propor alterações no código ">
                <outline text="que são implementadas caso aprovadas pelos mantenedores do repositório"/>
                <outline text=""/>
              </outline>
            </outline>
          </outline>
          <outline text="Terminal UNIX">
            <outline text="terminal para navegação entre arquivos e uso da CLI git"/>
            <outline text="Git CLI">
              <outline text="https://dynalist.io/d/msm2bDIbkBgzjMXq0Ms95-_R#z=oZlgd_ERknPpOuyjGv99osHs"/>
            </outline>
            <outline text="Customization">
              <outline text="Specific visual changes to the terminal to make it easy to use it with Git"/>
              <outline text="Tools ">
                <outline text="Hyper: Terminal Emulator"/>
                <outline text="Zsh with Oh-My-Zsh: Z Shell (Zsh) is a UNIX command line interperter (or simply a &quot;shell&quot;)  and Oh-My-Zsh is a framework for managing Zsh&apos;s configurations."/>
                <outline text="Spaceship: is a theme for Oh-My-Zsh"/>
              </outline>
            </outline>
          </outline>
          <outline text="Repository" collapsed="true">
            <outline text="Directory with the project files + metadata files (.git folder)"/>
          </outline>
        </outline>
        <outline text="Conhecimento">
          <outline text="Branches" collapsed="true">
            <outline text="Branches ">
              <outline text="are ">
                <outline text="essentially">
                  <outline text="a list of commits"/>
                  <outline text="that you can use `git log` to see the tip of th branch (latest commit) up to its first parent commit. "/>
                  <outline text=""/>
                </outline>
                <outline text="useful when ">
                  <outline text="making experimental versions"/>
                  <outline text="a new language version"/>
                  <outline text="making a version to show to other team members"/>
                  <outline text="working simultraneously in different features"/>
                  <outline text="etc. "/>
                </outline>
                <outline text="assist in ">
                  <outline text="keeping the master as the production level branch that always works"/>
                  <outline text="keeping changes easy to manage and have a trail that leads back logically. Its all about making the paths logical. "/>
                </outline>
              </outline>
              <outline text="can be ">
                <outline text="created">
                  <outline text="using git branch &lt;branchname&gt;"/>
                  <outline text="using git checkout -b &lt;branchname&gt;">
                    <outline text="which creates and checks out the newly created branch"/>
                  </outline>
                </outline>
                <outline text="merged">
                  <outline text="which means">
                    <outline text="combining the commits of two branches to create a new branch">
                      <outline text="most of the times it will be add the changes made in other branches">
                        <outline text="into the master branch"/>
                      </outline>
                      <outline text=""/>
                    </outline>
                  </outline>
                </outline>
                <outline text="deleted">
                  <outline text="which means">
                    <outline text="deleting the branch name but leaving the commits there in unreachable by that branch name">
                      <outline text="the commits will then be only reachable temporarily by commit id"/>
                      <outline text="the commits will be deleted once Git&apos;s garbage collection runs">
                        <outline text="this is sort of like a trash can ">
                          <outline text="but the difference is that it automatically happens from time to time ">
                            <outline text="or can be triggered manually with `git gc`"/>
                          </outline>
                        </outline>
                      </outline>
                      <outline text=""/>
                    </outline>
                    <outline text=""/>
                  </outline>
                </outline>
                <outline text=""/>
              </outline>
            </outline>
            <outline text="Example setups">
              <outline text="1 Master and many Dev Branches">
                <outline text="Master branch: ">
                  <outline text="production level work that is tested and QAd "/>
                </outline>
                <outline text="Development branches:">
                  <outline text="work-in-progress work to be tested and QAd"/>
                  <outline text="gets updated from time to time from lastest PRs that got merged into master OR just get branched out from master after an update"/>
                  <outline text="can be 1 or more branches with different names. any branch that isnt the master is a development branch that will add to the master"/>
                </outline>
                <outline text=""/>
              </outline>
            </outline>
          </outline>
          <outline text="Repository ">
            <outline text="Local"/>
            <outline text="Remote">
              <outline text="Shareable repository or simply a remote repository that syncs with a local or other remote repositories."/>
              <outline text="In case of a github remote,">
                <outline text="It only shows the commit history"/>
                <outline text="You can&apos;t clone into it, since you don&apos;t have access to the folder">
                  <outline text="you can only push commits from a local repository"/>
                </outline>
              </outline>
            </outline>
          </outline>
        </outline>
        <outline text="Papéis"/>
        <outline text="Procedimentos">
          <outline text="A. Find and Fix bugs" collapsed="true">
            <outline text="1. Do `git log --stat` to see all the commits, their ids and the changes (via `--stat`)"/>
            <outline text="2. Run the code, version by version - by doing git checkout &lt;commit-id&gt; - until you find a version that does not contain the bug">
              <outline text="Now you know that the bug is between the starting version and the current version that does not contain the bug"/>
              <outline text="You can do this one by one from the most recent to the oldest"/>
              <outline text="Or you can do this by memory, going back to where you knew it was working">
                <outline text="even though this older version may not have other updates, you just want to find the bug and you can fix it in the latest version"/>
              </outline>
            </outline>
            <outline text="3. When you find the version the does not contain the bug use `git dif`f to compare the commit the &quot;no-bug commit&quot; to the &quot;buggy commit&quot; like this:">
              <outline text="`git diff &lt;no-bug-commit-id&gt; &lt;buggy-commit-id&gt;`">
                <outline text="example">
                  <outline text="`git diff df035 25ede`">
                    <outline text="you don&apos;t need to copy and paste the whole commit ID. "/>
                    <outline text="Just type the 4 or more first letters so that git can find it."/>
                  </outline>
                </outline>
              </outline>
            </outline>
            <outline text="4. By using `git diff &lt;no-bug-commit-id&gt; &lt;buggy-commit-id&gt;` you will find the changes that were introduced which caused the bug"/>
            <outline text="5. Play around in the buggy commit  to see if you can fix the bug and the replicate to the latest commit">
              <outline text="OR go directly to the latest commit and fix the bug there."/>
              <outline text="Commit to save the new version with that bug fixed. "/>
            </outline>
          </outline>
          <outline text="B. Naviage through the commit history" collapsed="true">
            <outline text="1. Open the terminal"/>
            <outline text="2. Run `git log`">
              <outline text="add `--stat` to see what changed"/>
            </outline>
            <outline text="3. Use `git checkout &lt;comimt-id&gt;` to change your HEAD to another commit "/>
            <outline text="4. Run the code and/or use git diff to see the changes between the current HEAD and other commits "/>
          </outline>
          <outline text="C. Create a repository" collapsed="true">
            <outline text="1. Navigate to a folder you want the repository to be in or create a folder for it">
              <outline text="Navigate: cd &lt;folder-path&gt;"/>
              <outline text="Create a folder: mkdir &lt;folder-path&gt; "/>
            </outline>
            <outline text="2. Do `git init` "/>
            <outline text="3. A `.git` folder will be created but the repository will only be local"/>
          </outline>
          <outline text="D. Remember what changes you have added to stage" _note="Useful when after making changes and commiting you need to remember what changes you worked on. This may be needed if you take a break for example, and come back later to finish the work." collapsed="true">
            <outline text="1. Run `git diff` with no arguments to see the changes between staging area and working directory"/>
          </outline>
          <outline text="E. See changes between Staging Area and Most Recent Commit" _note="Useful for confirming if the changes added to staging are are as intented in relation to the most recent commit. " collapsed="true">
            <outline text="1. Run `git diff --staged` "/>
          </outline>
          <outline text="F. Create a new branch and naviagete to it" collapsed="true">
            <outline text="1. Run `git branch &lt;branch-name&gt;`"/>
            <outline text="2. Run `git branch` to see all the branchs created locally and remotely">
              <outline text="2.1 The star/asterisk symbol next to a branch name indicates the checkouted branch"/>
            </outline>
            <outline text="3. Run `git checkout &lt;newly-created-branch-name&gt;`"/>
          </outline>
          <outline text="G. Merge Branches" collapsed="true">
            <outline text="1. Go the branch you want the commits to merge **into**. In most cases this will be the master branch."/>
            <outline text="2. Run `git merge &lt;branch-name-1&gt; &lt;branch-name-2&gt; &lt;branch-name-2&gt; etc...` ">
              <outline text="This merges one or more branches into the current branch.">
                <outline text="the branch you specify on the command will be merged into branch you are. "/>
              </outline>
            </outline>
          </outline>
          <outline text="H. How to Solve **Merge Conflicts**" collapsed="true">
            <outline text="**__Message:__**" collapsed="true">
              <outline text="`Automatic merge failed; fix conflicts and then commit the result.`">
                <outline text="Fix it with:">
                  <outline text="GENERAL FIX">
                    <outline text="1. Restoring your files to their state before you started the merge by running:">
                      <outline text="`git merge --abort`"/>
                    </outline>
                    <outline text="2. Double check the state of your files, running">
                      <outline text="`git log`">
                        <outline text="Look for the latest commit you have done by using `git show`"/>
                      </outline>
                    </outline>
                    <outline text="3. Open the files that had conflicts and look for these **__special markers__** marking the conflicting commits:">
                      <outline text="**__Special markers:__**">
                        <outline text="A. `&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD` and `||||||| merged common ancestors`">
                          <outline text="between these two is the **__current branch commit__**"/>
                        </outline>
                        <outline text="B. `||||||| merged common ancestors` and `=======`">
                          <outline text="between these two is the **__common ancestor commit of both branches__**"/>
                        </outline>
                        <outline text="C. `=======` and `&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;conflicting-branch-name&gt;`">
                          <outline text="between these two is the **__merging branch commit__** that is conflicting with the **__current branch commit__**"/>
                        </outline>
                      </outline>
                    </outline>
                    <outline text="3. Fix the conflict by choosing one of the 3 conflicting commits (A, B or C) and if needed making incremental changes and deleting the special markers.">
                      <outline text="Incremental changes may be ">
                        <outline text="Using parts of one or more of the  A, B, C commits to create a new final version"/>
                        <outline text="Simply adding a new change elsewhere and keeping one of the options."/>
                      </outline>
                    </outline>
                    <outline text="4. Once are in the correct state, create a new commit with your changes (not sure why?)"/>
                    <outline text="5. Try the merge again"/>
                  </outline>
                </outline>
                <outline text="Possible Windows vs Unix Fix">
                  <outline text="Due to differences in the &quot;Enter&quot; character code between Unix and Windows">
                    <outline text="Unix uses">
                      <outline text="LF">
                        <outline text="`line feed`"/>
                      </outline>
                    </outline>
                    <outline text="Windows uses">
                      <outline text="`carriege return` and `line feed`">
                        <outline text="or simply">
                          <outline text="CRLF"/>
                        </outline>
                      </outline>
                    </outline>
                  </outline>
                  <outline text="So files edited in each system will have different enter characters and this may cause merge conflicts."/>
                  <outline text="To fix this, Windows users should set the global autocrlf attibute to true with">
                    <outline text="`git config --global core.autocrlf true`"/>
                  </outline>
                </outline>
              </outline>
            </outline>
          </outline>
          <outline text="I. Sync a Local Repo with a Remote Repo (such as GitHub)">
            <outline text="1. Run `git init` to initialize git in a folder, turning the folder into a repositiory"/>
            <outline text="2.  Do a commit ">
              <outline text="Run `git add &lt;file&gt; _or_ &lt;files&gt;`"/>
              <outline text="Run `git commit -m &quot;commit message`">
                <outline text="Usually a shared repo is started by:">
                  <outline text="2.1 Creating a README.md file">
                    <outline text="which will contain instructions for others accessing your repository"/>
                  </outline>
                  <outline text="2.2 Adding this readme file to the staging area"/>
                  <outline text="2.3 Commiting this as the &quot;__inital commit__&quot;"/>
                </outline>
                <outline text=""/>
              </outline>
              <outline text="3. Run `git push` to upload commits to remote repository">
                <outline text="Only reachabe commits on the branch you are will be uploaded."/>
              </outline>
            </outline>
          </outline>
          <outline text="J. Create a repository in GitHub">
            <outline text="1. Create and login to your Github account"/>
            <outline text="2. Click on the plus sign and choose &quot;New Repository&quot;"/>
            <outline text="3. Choose either public or private "/>
            <outline text="4. Choose __&quot;Initialize this repository with a README&quot;__ to start already with a README file that you can add info about your repo from the start. "/>
            <outline text="5. Add a list of files that Git should ignore by adding them to the .gitignore">
              <outline text="Suggestions for">
                <outline text="Mac">
                  <outline text=".DS_Store"/>
                </outline>
                <outline text="Windows">
                  <outline text="desktop.ini"/>
                  <outline text="thumb.db"/>
                </outline>
              </outline>
            </outline>
            <outline text="6. Add a license if needed"/>
            <outline text="7. Press &quot;Create Repository&quot;"/>
          </outline>
          <outline text="K. Push existing local repository to a remote repository">
            <outline text="1. Using `git remote`"/>
          </outline>
        </outline>
        <outline text="Results">
          <outline text="Eficiência">
            <outline text="Achar erros em questão de minutos ao invés de horas">
              <outline text="especialmente quando os arquivos são grandes (+ de 100 linhas, por exemplo)"/>
            </outline>
          </outline>
          <outline text="Colaboração">
            <outline text="Permite que várias pessoas trabalhem simultâneamente. "/>
            <outline text=""/>
          </outline>
        </outline>
      </outline>
      <outline text="Métricas"/>
    </outline>
  </body>
</opml>
